name: Prepare Release
on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version'
        required: true

env:
  BOT_USER_NAME: eclipse-csi-bot
  BOT_EMAIL: csi-bot@eclipse.org
  PYTHON_VERSION: '3.12'
  POETRY_VERSION: '1.8.4'

permissions:
  contents: read

concurrency:
  group: release-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

jobs:
  precheck:
    runs-on: ubuntu-22.04
    if: github.repository == 'eclipse-csi/otterdog'
    steps:
      - name: "Check ref"
        shell: bash
        run: |
          if [ "${{ github.ref }}" != "refs/heads/main" ]; then
            echo "Release shall only be made from 'main' branch, triggered branch '${{ github.ref_name }}', aborting."
            exit 1
          fi

  prepare-release:
    runs-on: ubuntu-22.04
    needs: ['precheck']
    permissions:
      contents: write
      pull-requests: write
    outputs:
      release-version: ${{ steps.prepare-release.outputs.RELEASE_VERSION }}
      release-tag: ${{ steps.prepare-release.outputs.RELEASE_TAG }}
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          ref: ${{ github.ref }}

      - uses: actions/setup-python@0b93645e9fea7318ecaed2b359559ac225c90a2b # v5.3.0
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - uses: snok/install-poetry@76e04a911780d5b312d89783f7b1cd627778900a # v1.4.1
        with:
          virtualenvs-in-project: true
          version: ${{ env.POETRY_VERSION }}

      - name: "Install dependencies"
        run: poetry install -v --without dev,typing,docs

      - name: "Run tests"
        run: |
          source $VENV
          pytest -rs tests

      - name: "Prepare release"
        id: prepare-release
        shell: bash
        env:
          RELEASE_VERSION: ${{ github.event.inputs.version }}
        run: |
          PROJECT_VERSION="$(poetry version -s)"

          echo "PROJECT_VERSION=$(echo $PROJECT_VERSION)" >> $GITHUB_OUTPUT
          echo "RELEASE_VERSION=$RELEASE_VERSION" >> $GITHUB_OUTPUT

          echo "Project version: $PROJECT_VERSION"
          echo "Release version: $RELEASE_VERSION"

          if git show-ref --tags --verify --quiet "refs/tags/v${RELEASE_VERSION}"; then
            echo "Release Tag 'v${RELEASE_VERSION}' already exists, aborting."
            exit 1
          fi

          # fill out release date in CHANGELOG.md
          sed -i -e "s/unreleased/$(date '+%d\/%m\/%Y')/" CHANGELOG.md

          if [ "$PROJECT_VERSION" != "$RELEASE_VERSION" ]; then
            poetry version $RELEASE_VERSION
          fi

          echo "RELEASE_TAG=v$RELEASE_VERSION" >> $GITHUB_OUTPUT

      - name: Create Pull Request
        id: create-pr
        uses: peter-evans/create-pull-request@5e914681df9dc83aa4e4905692ca88beb2f9e91f # v7.0.5
        with:
          title: "Preparing to release ${{ steps.prepare-release.outputs.RELEASE_VERSION }}"
          body: |
            This PR has been created automatically by the release.yml workflow.

            In order to release this version, merge this PR and tag the default branch afterwards with `${{ steps.prepare-release.outputs.RELEASE_TAG }}`.
            The publish.yml workflow will get automatically triggered and build and publish the artifacts.
          commit-message: "Preparing for release ${{ steps.prepare-release.outputs.RELEASE_VERSION }}"
          committer: "${{ env.BOT_USER_NAME }} <${{ env.BOT_EMAIL }}>"
