[project]
name = "otterdog"
description = "Tool to manage GitHub organizations and their repositories."
requires-python = ">=3.11,<4.0"
dependencies = [
    "GitPython (>=3.1,<4.0)",
    "JSONBender (>=0.9,<1.0)",
    "PyNaCl (>=1.5,<2.0)",
    "aiofiles (>=24.1,<25.0)",
    "aiohttp (>=3.11,<4.0.0)",
    "aiohttp-client-cache (>=0.12.3,<1.0.0)",
    "aiohttp-retry (>=2.9,<3.0)",
    "aioshutil (>=1.5,<2.0)",
    "aiosqlite (>=0.20,<1.0)",
    "asyncer (>=0.0.8,<1.0)",
    "chevron (>=0.14,<1.0)",
    "click (>=8.1,<9.0)",
    "importlib_resources (>=6.4,<7.0)",
    "jsonata-python (>=0.5,<1.0)",
    "jsonschema (>=4.23,<5.0)",
    "jwt (>=1.3,<2.0)",
    "mintotp (>=0.3,<1.0)",
    "playwright (>=1.44,<2.0)",
    "requests (>=2.32,<3.0)",
    "rich (>=13.9,<14.0)",
    "rjsonnet (>=0.5,<1.0)"
]
authors = [
    { name = "Thomas Neidhart", email = "thomas.neidhart@eclipse-foundation.org" },
]
license = { text = "EPL-2.0" }
readme = "README.md"
keywords = ["infrastructure-as-code", "supply-chain-security", "github", "gitops"]
dynamic = [ "classifiers", "version" ]

[project.urls]
Homepage = "https://github.com/eclipse-csi/otterdog"
Changelog = "https://github.com/eclipse-csi/otterdog/blob/main/CHANGELOG.md"
Repository = "https://github.com/eclipse-csi/otterdog"
Documentation = "https://otterdog.readthedocs.io"

[project.scripts]
otterdog = "otterdog.cli:cli"

[tool.poetry]
requires-poetry = ">=2.0"
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "Intended Audience :: System Administrators",
    "Topic :: Security",
    "Topic :: Software Development :: Version Control",
    "Topic :: System :: Systems Administration",
    "Typing :: Typed",
]
packages = [
    { include = "otterdog" }
]
include = [
    "CHANGELOG.md",
    "README.md",
    "LICENSE",
    { path = ".dockerignore", format = "sdist"},
    { path = "Makefile", format = "sdist"},
    { path = "docker", format = "sdist"},
    { path = "docs", format = "sdist"},
    { path = "examples", format = "sdist"},
    { path = "mkdocs.yml", format = "sdist"},
    { path = "otterdog.sh", format = "sdist"},
    { path = "poetry.lock", format = "sdist"},
    { path = "tests", format = "sdist" },
]
exclude = [
    "otterdog/app.py",
    "otterdog/webapp"
]
version = "0.0.0"

[tool.poetry.requires-plugins]
poetry-dynamic-versioning = { version = ">=1.0.0,<2.0.0", extras = ["plugin"] }

[tool.poetry.group.app.dependencies]
quart                = "^0.20"
quart-flask-patch    = "^0.3"
python-decouple      = "^3.8"
python-dotenv        = "^1.0"
pymongo              = "==4.9.1"
pydantic             = "^2.7"
odmantic             = "^1.0"
quart-auth           = "^0.10"
quart-redis          = "^2.0"
github-flask         = "^3.2"
aiohttp-client-cache = {version=">=0.12.3", extras=["redis"]}
ariadne              = "^0.23"
pyyaml               = "^6.0"
semver               = "^3.0"
python-slugify       = "^8.0"

[tool.poetry.group.dev]
optional = true

[tool.poetry.group.dev.dependencies]
ruff       = "^0.8"
mypy       = "^1.8"
pre-commit = "^4.0"

[tool.poetry.group.test.dependencies]
tox            = ">4.22"
pytest         = "^8.0"
pytest-asyncio = "^0.24"
parameterized  = "^0.9"

[tool.poetry.group.typing]
optional = true

[tool.poetry.group.typing.dependencies]
types-colorama       = "^0.4"
types-requests       = "^2.31"
types-jsonschema     = "^4.17"
types-chevron        = "^0.14"
types-aiofiles       = "^24.0"
types-redis          = "^4.6"
types-PyYAML         = "^6.0"
motor-types          = ">=1.0.0b4"
types-python-slugify = "^8.0"

[tool.poetry.group.docs]
optional = true

[tool.poetry.group.docs.dependencies]
mkdocs             = "^1.5"
mkdocs-material    = "^9.5"
mkdocs-exclude     = "^1.0"
pymdown-extensions = "^10.7"

[tool.poetry-dynamic-versioning]
enable     = true
vcs        = "git"
latest-tag = true
format-jinja = """
    {%- if distance == 0 -%}
        {{ serialize_pep440(base, stage, revision) }}
    {%- else -%}
        {{ serialize_pep440(bump_version(base, 1), stage, revision, dev=distance) }}
    {%- endif -%}
"""

[build-system]
requires      = ["poetry-core>=2.0", "poetry-dynamic-versioning>=1.5.2,<2.0.0"]
build-backend = "poetry_dynamic_versioning.backend"

[tool.pytest.ini_options]
minversion = "7.2"
testpaths  = ["tests"]
pythonpath = [".", "otterdog"]

log_cli             = true
log_cli_level       = "INFO"
log_cli_format      = "%(asctime)s [%(levelname)8s] %(message)s (%(filename)s:%(lineno)s)"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"

asyncio_default_fixture_loop_scope="function"

[tool.mypy]
python_version = "3.11"
exclude        = ["scripts", "docs", "tests"]

[tool.ruff]
line-length    = 120
indent-width   = 4
target-version = "py311"

[tool.ruff.lint]
extend-select = [
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "ERA", # flake8-eradicate/eradicate
    "I",   # isort
    "N",   # pep8-naming
    "PIE", # flake8-pie
    "S",   # flake8-bandit
    "PGH", # pygrep
    "RUF", # ruff checks
    "SIM", # flake8-simplify
    "T20", # flake8-print
    "TCH", # flake8-type-checking
    "TID", # flake8-tidy-imports
    "UP",  # pyupgrade
]
ignore = [
    "E203",
    "ERA001", # commented out code
    "PGH003", # specific ignore
    "PGH004", # specific ignore
    "SIM102", # nested ifs
    "SIM103", # inline return
    "N818",   # exception names
    "S102",   # we deliberately use exec
    "S105"    # hardcoded passwords (too many false-positives for now)
]

[tool.ruff.lint.per-file-ignores]
"**/db/models.py" = ["UP007", "TCH003"] # new optional spec is not yet supported by odmantic
"**/webhook/github_models.py" = ["TCH003"]
"tests/**/*.py" = ["S101"]

[tool.tox]
requires = ["tox>=4.22"]
env_list = ["3.11", "3.12", "3.13"]

[tool.tox.env_run_base]
description = "Run tests under {base_python}"
skip_install = true
allowlist_externals = ["poetry"]
commands_pre = [["poetry", "install", "--without", "dev,typing,docs"]]
commands = [["poetry", "run", "pytest", "tests/", "--import-mode", "importlib"]]
